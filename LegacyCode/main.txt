
/* CONSTRUCTOR */
tree::tree(int depth, std::vector<int>tree_structure){
    
    /*  initialize arrays */
    unsigned int* bits  {new unsigned int[depth]{}};
    unsigned int* shift {new unsigned int[depth]{}};
    unsigned int* entry {new unsigned int[depth]{}};
    this->bitmask = bits;
    this->bitshift = shift;
    this->entrycount = entry;

    levels = depth;                                     // SET NUMBER OF LEVELS
    unsigned int helper = 0x00000001;
    // unsigned int buffer = 0x00000000;
    // unsigned int test   = 0x19f9cfa0;
    // test = convert_endian(test);
    // int manual = 0;
    // std::cout<<"\nBITMASK: ";
    // hex_tostring(test);
    
    for(unsigned int i = 0; i < depth; i++){
        
        /* set bits to shift per level */
        bitshift[i] = log2(helper);

        unsigned int val = pow(2,tree_structure.at(i));
        
        /* set bitmask per level */
        helper*=val;
        // helper--;
        // // buffer--;
        // std::cout<<"buff "<<buffer<< " helper: "<< helper << "\n\t\t";
        // // WRONG SIDE bitmask[i] = buffer ^ helper;         // BITWISE XOR TO ISOLATE BITMASK
        // bitmask[i] = buffer ^ helper;        // BITWISE XOR TO ISOLATE BITMASK
        // buffer = helper;
        // helper++;
        
        // /* test bitmasking */
        // hex_tostring(bitmask[i]);
        // hex_tostring(remove_trailing_zeroes(bitmask[i] & test));
       
        /* set page sizes per level */
        entrycount[i] = val;

    }

    manually_set_mask(tree_structure);
    // for(int i = 0; i < tree_structure.size(); i++)
    //     hex_tostring(bitmask[i]);
    std::cout << std::endl;
    root_ptr = new level(0,this,entrycount[0]);              // SET POINTER TO ROOT NODE
}


#include <iostream>
#include <sstream>
#include <unordered_set>
#include <math.h>
#include <stdexcept>
#include <vector>
#include "arguments.h"
#include "tree.h"
#include "level.h"
#define TRACE_FILE "trace.tr"


using namespace std;

#include <unistd.h>
#include <cstdlib>
/* proccess cli argument flags */
void process_flags(int argc, char **argv){
    int c;
    while((c = getopt (argc, argv, "n:c:o"))!= -1){
        switch(c){
            case 'n':
                if(optarg){
                    arguments::process_lines = atoi(optarg);
                    arguments::bit_count -= atoi(optarg);
                    arguments::level_count--;
                }
                break;
            case 'c':
                if(optarg){
                    arguments::cache_size = atoi(optarg);
                    arguments::bit_count -= atoi(optarg);
                    arguments::level_count--;
                }
                break;
            case 'o':
                if(optarg)
                    arguments::mode = optarg;
                break;
        }
    }
}

void print_args(){
    /* print values of cli arguments */
    unordered_set<string>::iterator it = arguments::args.begin();
    cout << "map values:\t";
    while(it != arguments::args.end()){
        cout << (*it) << " ";
        it++;
    }
    cout << endl;
    cout << "bit count:\t" << arguments::bit_count << endl;
    cout << "level count:\t" << arguments::level_count << endl;
    cout << "process lines:\t" << arguments::process_lines << endl;
    cout << "cache size:\t" << arguments::cache_size << endl;
    cout << "mode:\t\t" << arguments::mode << endl;
    cout << "\n" << endl;
}

int main(int argc, char **argv){
    
    vector<int> bit_args;
    try{
        if(argc < 3)
            throw invalid_argument("You must supply the trace file "
                "and a bit mask.\n");
        
        /* process cli flags */
        int c;
        while((c = getopt (argc, argv, "n:c:o"))!= -1){
            switch(c){
                case 'n':
                    cout << "testing" << endl;
                    if(optarg){
                        arguments::process_lines = atoi(optarg);
                        arguments::bit_count -= atoi(optarg);
                        arguments::level_count--;
                    }
                    break;
                case 'c':
                    if(optarg){
                        arguments::cache_size = atoi(optarg);
                        arguments::bit_count -= atoi(optarg);
                        arguments::level_count--;
                    }
                    break;
                case 'o':
                    if(optarg)
                        arguments::mode = optarg;
                    break;
            }
        }
        
        /* loop through command line arguments */
        for(int i = 1; i < argc; i++){

            /* string stream to read cli args */
            istringstream iss( argv[i] );
            
            /* check if argumnet is integer */
            int val;
            if (iss >> val){
                if(val < 0)
                    throw invalid_argument("Level "+to_string(arguments::level_count)+
                        " page table must be at least 1 bit");
                bit_args.push_back(val);
                arguments::bit_count+=val;
                arguments::level_count++;

            /* argument is not integer */
            } else {
                arguments::args.insert(argv[i]);
            }
        }

        // /* print cli arguments */
        print_args();
        // unordered_set<string>::iterator it = arguments::args.begin();
        // cout << "map values:\t";
        // while(it != arguments::args.end()){
        //     cout << (*it) << " ";
        //     it++;
        // }
        // cout << endl;
        // cout << "bit count:\t" << arguments::bit_count << endl;
        // cout << "level count:\t" << arguments::level_count << endl;
        // cout << "process lines:\t" << arguments::process_lines << endl;
        // cout << "cache size:\t" << arguments::cache_size << endl;
        // cout << "mode:\t\t" << arguments::mode << endl;
        // cout << "\n" << endl;

        if(arguments::bit_count > 28)
            throw invalid_argument("Too many bits used in page tables");

        if(arguments::args.count(TRACE_FILE)==0)
            throw invalid_argument("Unable to open <<"+string(TRACE_FILE)+">>");
        
    } catch(const char* msg){
        cout << msg << endl;
    } catch (const ios_base::failure& e){
        cout << "Unable to open <<" << e.what() << ">>" << endl;
    } catch ( const exception& e ) {
        cerr << "ERROR: " << e.what() << endl;
    }
    
    return 0;
}
