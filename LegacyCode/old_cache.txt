

/*


/* if cache size is smaller than LRU then all elements will be in LRU
            must choose oldes instead
        // if(this->size < LRU_SIZE){

        //     if(LRU.rbegin()==LRU.rend())
        //         throw std::length_error("LRU SIZE ERROR");
        //     else{
        //         unsigned int i = 0;
        //         std::map<unsigned int, unsigned int>::iterator LRU_it;
        //         for(LRU_it = LRU.begin(); LRU_it != LRU.end(); LRU_it++){
                    
        //             std::cout<< LRU_it->first << "\t";
        //             hex_string(LRU_it->second, true);

        //             /* if lookup contains LRU value, remove it
        //             if(lookup.count(LRU_it->second)!=0){
        //                 std::cout<<"breaking with: ";
        //                 hex_string(LRU_it->second,false);
        //                 break;
        //             }
        //         }

        //         std::cout<<"\t\t\t\t\tREPLACING: ";
        //         hex_string(LRU_it->second,false);
        //         std::cout <<" " << LRU_it->first<<"\n\n";
        //         lookup.erase(LRU_it->second);
        //     }
        //     insert(vpn,virtual_time,address,pfn,page_table_hit);
        
        // if cache is larger than LRU there will be a victim
        // } else {


 
        
        
            
        int i = 0; 
        for(const auto &lookup_mapping : lookup){
            
            mymap *tmp_mapping = lookup_mapping.second;
            bool found = false;

            // hex_string(tmp_mapping->vpn,true);
            
            // std::cout<<"i: "<< i;
            // int j = 0;
            for(const auto &lookup_LRU : LRU){
                // std::cout<<" j: "<< j;
                unsigned int lru_vpn = lookup_LRU.second;
                
                // hex_string(tmp_mapping->vpn,false);
                // hex_string(lookup_LRU.second,false);
                

                if(tmp_mapping->vpn == lru_vpn){
                    // std::cout<<"MAPPING FOUND IN LRU"<<std::endl;
                    found = true;               
                } 
                // j++;
            }
            // std::cout<<std::endl;
            // i++;

//            mapping was not present in working set (LRU) -> victim 
            if(!found){
                // std::cout<<"REPLACING: ";
                // hex_string(lookup_mapping.first,true);
                lookup.erase(lookup_mapping.first);
                
 //           recurssive call since cache has room, break loop
                insert(vpn,virtual_time,address,pfn,page_table_hit);
                break;
            }
           std::cout<<"NOT REPLACED"<<std::endl;
        }
    }

    //mymap *tmpmap = this->contains(vpn);

    /* mapping not present, insert into cache and update LRU */
    //if(tmpmap == nullptr){
    
    /* mapping is present, update LRU
    // } else {
    //     this->update(virtual_time, vpn);
    // }
*/